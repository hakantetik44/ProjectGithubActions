name: AliExpress Test Automation

on:
  push:
    branches:
      - '**'  # Tüm branchler için
  pull_request:
    branches: 
      - 'main'
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

# Top level permissions for all jobs
permissions:
  contents: write
  pages: write
  id-token: write
  checks: write
  actions: write
  deployments: write
  statuses: write
  issues: write
  pull-requests: write
  security-events: write

# Configure GitHub Pages at repository level
env:
  GITHUB_PAGES: true
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  DEPLOY_URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
  TIMESTAMP: ${{ format('YYYY-MM-DD HH:mm:ss', github.event.head_commit.timestamp) }}

jobs:
  test:
    name: 🧪 Test ve Raporlama
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: ☕ Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: 📦 Maven Cache
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: 🖥️ Setup Display
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        echo "DISPLAY=:99" >> $GITHUB_ENV
    
    - name: 🎥 Setup Video Recording
      run: |
        sudo apt-get install -y ffmpeg
        mkdir -p target/videos
        ffmpeg -y -f x11grab -video_size 1920x1080 -i :99 -codec:v libx264 -r 30 target/videos/test-recording.mp4 &
        echo $! > /tmp/ffmpeg.pid
        sleep 3
    
    - name: 🌐 Chrome Setup
      uses: browser-actions/setup-chrome@latest
    
    - name: 🚗 ChromeDriver Setup
      uses: nanasess/setup-chromedriver@master
    
    - name: 🧪 Run Tests
      run: mvn clean test -Dmaven.test.failure.ignore=true
    
    - name: 🛑 Stop Video Recording
      if: always()
      run: |
        if [ -f /tmp/ffmpeg.pid ]; then
          pid=$(cat /tmp/ffmpeg.pid)
          kill -INT $pid || true
          sleep 5
        fi
    
    - name: 📊 Generate Allure Report
      if: always()
      run: |
        # Download and install Allure CLI
        curl -o allure-2.24.0.tgz -OL https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.24.0/allure-commandline-2.24.0.tgz
        sudo tar -zxvf allure-2.24.0.tgz -C /opt/
        sudo ln -s /opt/allure-2.24.0/bin/allure /usr/bin/allure
        
        # Generate report using both Maven and CLI
        mvn allure:report
        allure generate target/allure-results -o target/allure-report --clean
        
        # Debug: Show report contents
        echo "Maven Allure Report:"
        ls -la target/site/allure-maven-plugin/
        echo "CLI Allure Report:"
        ls -la target/allure-report/
    
    - name: 📦 Package Test Results
      if: always()
      run: |
        mkdir -p target/test-results
        
        # Copy Allure reports
        if [ -d "target/site/allure-maven-plugin" ]; then
          cp -r target/site/allure-maven-plugin target/test-results/allure-report
          echo "✓ Maven Allure report copied"
        fi
        
        if [ -d "target/allure-report" ]; then
          cp -r target/allure-report/* target/test-results/allure-report/
          echo "✓ CLI Allure report merged"
        fi
        
        # Copy other test artifacts
        cp -r target/allure-results target/test-results/ || true
        cp -r target/surefire-reports target/test-results/ || true
        cp -r target/videos target/test-results/ || true
        
        # Debug: Show final structure
        echo "Final test results structure:"
        ls -R target/test-results/
    
    - name: 📤 Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: target/test-results
        retention-days: 30

  pages:
    name: 🌐 Deploy Report
    needs: test
    runs-on: ubuntu-latest
    if: always()
    
    permissions:
      pages: write
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 📥 Download Test Results
      uses: actions/download-artifact@v4
      with:
        name: test-results
        path: target/test-results
    
    - name: 📂 Prepare Pages Directory
      run: |
        mkdir -p target/pages
        SAFE_BRANCH_NAME=$(echo "${{ env.BRANCH_NAME }}" | sed 's/[^a-zA-Z0-9]/-/g')
        mkdir -p "target/pages/branches/$SAFE_BRANCH_NAME"
        
        if [ -d "target/test-results/allure-report" ]; then
          cp -r target/test-results/allure-report/* "target/pages/branches/$SAFE_BRANCH_NAME/"
          echo "✓ Allure report copied"
        fi
        
        if [ -d "target/test-results/videos" ]; then
          cp -r target/test-results/videos "target/pages/branches/$SAFE_BRANCH_NAME/"
          echo "✓ Videos copied"
        fi
    
    - name: 🔧 Configure Pages
      uses: actions/configure-pages@v4
    
    - name: 📤 Upload Pages Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: target/pages
        retention-days: 30

  deploy:
    name: 🚀 Deploy Pages
    needs: pages
    runs-on: ubuntu-latest
    if: always()
    
    permissions:
      pages: write
      id-token: write
    
    steps:
    - name: 🌐 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  notify:
    name: 📢 Bildirim Gönderme
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📋 Create Summary
      run: |
        if [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "## ✅ Testler Başarıyla Tamamlandı" >> $GITHUB_STEP_SUMMARY
          echo "Branch: ${{ env.BRANCH_NAME }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Test Hatası Tespit Edildi" >> $GITHUB_STEP_SUMMARY
          echo "Branch: ${{ env.BRANCH_NAME }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "## 🌐 Rapor Başarıyla Yayınlandı" >> $GITHUB_STEP_SUMMARY
          echo "📊 [Ana Rapor](${{ env.DEPLOY_URL }})" >> $GITHUB_STEP_SUMMARY
          echo "📊 [Branch Raporu](${{ env.DEPLOY_URL }}/branches/${{ env.BRANCH_NAME }})" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ Rapor Yayınlama Hatası" >> $GITHUB_STEP_SUMMARY
        fi 