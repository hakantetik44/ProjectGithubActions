name: AliExpress Test Automation

on:
  push:
    branches:
      - '**'  # Tüm branchler için
  pull_request:
    branches: 
      - 'main'
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

# Top level permissions for all jobs
permissions:
  contents: write
  pages: write
  id-token: write
  checks: write
  actions: write
  deployments: write
  statuses: write
  issues: write
  pull-requests: write
  security-events: write

# Configure GitHub Pages at repository level
env:
  GITHUB_PAGES: true
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  DEPLOY_URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
  TIMESTAMP: ${{ format('YYYY-MM-DD HH:mm:ss', github.event.head_commit.timestamp) }}

jobs:
  setup:
    name: 🛠️ Ortam Hazırlığı
    runs-on: ubuntu-latest
    outputs:
      chrome-version: ${{ steps.chrome-version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: ☕ Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: 📦 Maven Cache
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: 🖥️ Setup Display
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        echo "DISPLAY=:99" >> $GITHUB_ENV
    
    - name: 🌐 Chrome Kurulumu
      uses: browser-actions/setup-chrome@latest
      with:
        chrome-version: stable
    
    - name: 🚗 ChromeDriver Kurulumu
      uses: nanasess/setup-chromedriver@master
    
    - name: ℹ️ Chrome Versiyonu Kontrolü
      id: chrome-version
      run: |
        version=$(google-chrome --version | cut -d ' ' -f 3)
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "Chrome Version: $version"
        chromedriver --version

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: ☕ Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
        
    - name: 🌐 Set up Chrome
      uses: browser-actions/setup-chrome@latest
      with:
        chrome-version: stable
        
    - name: 📝 Check Chrome version
      run: |
        chrome --version
        which chrome
        
    - name: 🎥 Setup Video Recording
      run: |
        sudo apt-get install -y ffmpeg
        mkdir -p target/videos
        ffmpeg -y -f x11grab -video_size 1920x1080 -i :99 -codec:v libx264 -r 30 target/videos/test-recording.mp4 &
        echo $! > /tmp/ffmpeg.pid
        sleep 3 # Wait for ffmpeg to start
        
    - name: 🧪 Run Tests
      run: |
        mvn clean test
        
    - name: 🛑 Stop Video Recording
      if: always()
      run: |
        if [ -f /tmp/ffmpeg.pid ]; then
          pid=$(cat /tmp/ffmpeg.pid)
          kill -INT $pid || true
          sleep 5
          if ps -p $pid > /dev/null; then
            kill -KILL $pid || true
          fi
        fi
        
    - name: 📊 Generate Allure Report
      if: always()
      run: |
        mvn allure:report
        
    - name: 📦 Package Test Results
      if: always()
      run: |
        mkdir -p target/test-results/videos
        if [ -f "target/videos/test-recording.mp4" ]; then
          cp target/videos/test-recording.mp4 target/test-results/videos/
        fi
        cp -r target/surefire-reports target/test-results/ || true
        cp -r target/site/allure-maven-plugin target/test-results/allure-report || true
        
    - name: 📤 Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: target/test-results
        retention-days: 30

  report:
    name: Deploy Report
    needs: test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 📥 Download Test Results
      uses: actions/download-artifact@v4
      with:
        name: test-results
        path: test-results
        
    - name: 📋 Create Branch Directory
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        BRANCH_DIR="branches/$BRANCH_NAME"
        
        # Create temp directory
        mkdir -p /tmp/allure-temp
        
        # Copy files to temp directory
        cp -r test-results/allure-report/* /tmp/allure-temp/
        
        # Create branch directory and copy from temp
        mkdir -p "$BRANCH_DIR"
        cp -r /tmp/allure-temp/* "$BRANCH_DIR/"
        
        # Copy videos if they exist
        if [ -d "test-results/videos" ]; then
          mkdir -p "$BRANCH_DIR/videos"
          cp -r test-results/videos/* "$BRANCH_DIR/videos/"
        fi
        
        # Debug info
        echo "Branch directory contents:"
        ls -la "$BRANCH_DIR"
        
        # Clean up
        rm -rf /tmp/allure-temp
        
    - name: 🚀 Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        force_orphan: true
        
    - name: 📝 Create Report Summary
      if: always()
      run: |
        echo "### Test Report Summary" >> $GITHUB_STEP_SUMMARY
        echo "✅ Test results have been deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
        echo "📊 [View Allure Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/branches/${GITHUB_REF#refs/heads/}/index.html)" >> $GITHUB_STEP_SUMMARY
        echo "🎥 [Download Test Recording](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/branches/${GITHUB_REF#refs/heads/}/videos/test-recording.mp4)" >> $GITHUB_STEP_SUMMARY

  pages:
    name: 🌐 GitHub Pages
    needs: report
    runs-on: ubuntu-latest
    if: always()
    # Environment protection kurallarını bypass etmek için
    permissions:
      pages: write
      id-token: write
      deployments: write
      actions: write
      security-events: write
      contents: write
      issues: write
      pull-requests: write
    
    steps:
    - name: 🔄 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 📥 Test Raporlarını İndir
      uses: actions/download-artifact@v4
      with:
        name: test-results
        path: target/site/allure-maven-plugin
    
    - name: 🔧 Configure Pages
      uses: actions/configure-pages@v4
    
    - name: 📂 Branch Klasörü Oluştur
      run: |
        # Branch adını al
        BRANCH_NAME="${{ env.BRANCH_NAME }}"
        TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
        
        # Ana dizinde branches klasörü oluştur
        mkdir -p target/site/allure-maven-plugin/branches
        
        # Branch için klasör oluştur
        BRANCH_DIR="target/site/allure-maven-plugin/branches/$BRANCH_NAME"
        mkdir -p "$BRANCH_DIR"
        
        # Raporları branch klasörüne kopyala
        cp -r target/site/allure-maven-plugin/* "$BRANCH_DIR/" || true
        
        # Branch bilgilerini JSON dosyasına kaydet
        cat > target/site/allure-maven-plugin/branches/branch-info.json << EOL
        {
          "lastUpdated": "$TIMESTAMP",
          "currentBranch": "$BRANCH_NAME",
          "branches": [
            {
              "name": "$BRANCH_NAME",
              "lastUpdated": "$TIMESTAMP",
              "reportUrl": "${{ env.DEPLOY_URL }}/branches/$BRANCH_NAME",
              "commit": "${{ github.sha }}",
              "author": "${{ github.actor }}"
            }
          ]
        }
        EOL
        
        # Ana sayfa için dinamik index.html oluştur
        cat > target/site/allure-maven-plugin/index.html << EOL
        <!DOCTYPE html>
        <html>
        <head>
            <title>AliExpress Test Reports</title>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
                    margin: 0;
                    padding: 20px;
                    background: #f6f8fa;
                }
                .container {
                    max-width: 1200px;
                    margin: 0 auto;
                    background: white;
                    padding: 30px;
                    border-radius: 10px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                }
                h1 { 
                    color: #24292e;
                    border-bottom: 2px solid #e1e4e8;
                    padding-bottom: 10px;
                }
                .branch-list {
                    list-style: none;
                    padding: 0;
                }
                .branch-card {
                    background: #fff;
                    border: 1px solid #e1e4e8;
                    border-radius: 6px;
                    margin: 10px 0;
                    padding: 15px;
                    transition: all 0.2s ease;
                }
                .branch-card:hover {
                    box-shadow: 0 2px 15px rgba(0,0,0,0.1);
                    transform: translateY(-2px);
                }
                .branch-card.current {
                    border-left: 4px solid #2ea44f;
                }
                .branch-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }
                .branch-name {
                    font-size: 1.2em;
                    font-weight: 600;
                    color: #0366d6;
                }
                .branch-meta {
                    margin-top: 10px;
                    color: #586069;
                    font-size: 0.9em;
                }
                .branch-links {
                    margin-top: 15px;
                }
                .branch-links a {
                    display: inline-block;
                    padding: 5px 12px;
                    margin-right: 10px;
                    background: #f1f8ff;
                    border: 1px solid #c8e1ff;
                    border-radius: 6px;
                    color: #0366d6;
                    text-decoration: none;
                    font-size: 0.9em;
                }
                .branch-links a:hover {
                    background: #e1f0ff;
                }
                .timestamp {
                    color: #586069;
                    font-size: 0.9em;
                    margin-top: 20px;
                }
                .repo-info {
                    margin-top: 30px;
                    padding-top: 20px;
                    border-top: 1px solid #e1e4e8;
                    color: #586069;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>🧪 AliExpress Test Reports</h1>
                <div id="branchList">Loading branches...</div>
                
                <script>
                    async function loadBranches() {
                        try {
                            const response = await fetch('branches/branch-info.json');
                            const data = await response.json();
                            
                            const branchListHtml = data.branches.map(branch => {
                                const isCurrent = branch.name === data.currentBranch;
                                return \`
                                    <div class="branch-card \${isCurrent ? 'current' : ''}">
                                        <div class="branch-header">
                                            <span class="branch-name">🌿 \${branch.name}</span>
                                            <span class="branch-meta">
                                                👤 \${branch.author} | 
                                                📅 \${branch.lastUpdated}
                                            </span>
                                        </div>
                                        <div class="branch-links">
                                            <a href="branches/\${branch.name}">📊 View Report</a>
                                            <a href="https://github.com/${{ github.repository }}/commit/\${branch.commit}">📝 View Commit</a>
                                        </div>
                                    </div>
                                \`;
                            }).join('');
                            
                            document.getElementById('branchList').innerHTML = branchListHtml;
                            
                        } catch (error) {
                            console.error('Error loading branches:', error);
                            document.getElementById('branchList').innerHTML = 'Error loading branch information.';
                        }
                    }
                    
                    loadBranches();
                </script>
                
                <p class="timestamp">Last updated: $TIMESTAMP</p>
                
                <div class="repo-info">
                    <p>📦 Repository: <a href="https://github.com/${{ github.repository }}">${{ github.repository }}</a></p>
                    <p>🔄 Build: #${{ github.run_number }} | 🌿 Current Branch: $BRANCH_NAME</p>
                </div>
            </div>
        </body>
        </html>
        EOL
        
        # Debug bilgisi
        echo "Branch directory structure:"
        ls -R target/site/allure-maven-plugin/branches/
    
    - name: 📤 Upload Pages Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: target/site/allure-maven-plugin
        retention-days: 30

  deploy:
    name: 🚀 Rapor Yayınlama
    needs: pages
    runs-on: ubuntu-latest
    if: always()
    # Environment protection kurallarını bypass etmek için
    permissions:
      pages: write
      id-token: write
      deployments: write
      actions: write
      security-events: write
      contents: write
      issues: write
      pull-requests: write
    
    steps:
    - name: 🌐 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      with:
        artifact_name: github-pages
        preview: false
        error_count: 0
        
    - name: ✅ Verify Deployment
      if: success()
      run: |
        echo "Deployment successful!"
        echo "Report URL: ${{ env.DEPLOY_URL }}/branches/${{ env.BRANCH_NAME }}"

  notify:
    name: 📢 Bildirim Gönderme
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📋 Durum Kontrolü
      run: |
        if [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "## ✅ Testler Başarıyla Tamamlandı" >> $GITHUB_STEP_SUMMARY
          echo "Branch: ${{ env.BRANCH_NAME }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Test Hatası Tespit Edildi" >> $GITHUB_STEP_SUMMARY
          echo "Branch: ${{ env.BRANCH_NAME }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "## 🌐 Rapor Başarıyla Yayınlandı" >> $GITHUB_STEP_SUMMARY
          echo "📊 [Ana Rapor](${{ env.DEPLOY_URL }})" >> $GITHUB_STEP_SUMMARY
          echo "📊 [Branch Raporu](${{ env.DEPLOY_URL }}/branches/${{ env.BRANCH_NAME }})" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ Rapor Yayınlama Hatası" >> $GITHUB_STEP_SUMMARY
        fi 