name: AliExpress Test Automation

on:
  push:
    branches: [ "main", "feature/**" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

# Top level permissions for all jobs
permissions:
  contents: write
  pages: write
  id-token: write
  checks: write
  actions: write
  deployments: write
  statuses: write
  issues: write
  pull-requests: write
  security-events: write

# Configure GitHub Pages at repository level
env:
  GITHUB_PAGES: true
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  DEPLOY_URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}

jobs:
  setup:
    name: 🛠️ Ortam Hazırlığı
    runs-on: ubuntu-latest
    outputs:
      chrome-version: ${{ steps.chrome-version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: ☕ Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: 📦 Maven Cache
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: 🖥️ Setup Display
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        echo "DISPLAY=:99" >> $GITHUB_ENV
    
    - name: 🌐 Chrome Kurulumu
      uses: browser-actions/setup-chrome@latest
      with:
        chrome-version: stable
    
    - name: 🚗 ChromeDriver Kurulumu
      uses: nanasess/setup-chromedriver@master
    
    - name: ℹ️ Chrome Versiyonu Kontrolü
      id: chrome-version
      run: |
        version=$(google-chrome --version | cut -d ' ' -f 3)
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "Chrome Version: $version"
        chromedriver --version

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: ☕ Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
        
    - name: 🌐 Set up Chrome
      uses: browser-actions/setup-chrome@latest
      with:
        chrome-version: stable
        
    - name: 📝 Check Chrome version
      run: |
        chrome --version
        which chrome
        
    - name: 🎥 Setup Video Recording
      run: |
        sudo apt-get install -y ffmpeg
        mkdir -p target/videos
        ffmpeg -y -f x11grab -video_size 1920x1080 -i :99 -codec:v libx264 -r 30 target/videos/test-recording.mp4 &
        echo $! > /tmp/ffmpeg.pid
        sleep 3 # Wait for ffmpeg to start
        
    - name: 🧪 Run Tests
      run: |
        mvn clean test
        
    - name: 🛑 Stop Video Recording
      if: always()
      run: |
        if [ -f /tmp/ffmpeg.pid ]; then
          pid=$(cat /tmp/ffmpeg.pid)
          kill -INT $pid || true
          sleep 5
          if ps -p $pid > /dev/null; then
            kill -KILL $pid || true
          fi
        fi
        
    - name: 📊 Generate Allure Report
      if: always()
      run: |
        mvn allure:report
        
    - name: 📦 Package Test Results
      if: always()
      run: |
        mkdir -p target/test-results/videos
        if [ -f "target/videos/test-recording.mp4" ]; then
          cp target/videos/test-recording.mp4 target/test-results/videos/
        fi
        cp -r target/surefire-reports target/test-results/ || true
        cp -r target/site/allure-maven-plugin target/test-results/allure-report || true
        
    - name: 📤 Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: target/test-results
        retention-days: 30

  report:
    name: Deploy Report
    needs: test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 📥 Download Test Results
      uses: actions/download-artifact@v4
      with:
        name: test-results
        path: test-results
        
    - name: 📋 Create Branch Directory
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        BRANCH_DIR="branches/$BRANCH_NAME"
        
        # Create temp directory
        mkdir -p /tmp/allure-temp
        
        # Copy files to temp directory
        cp -r test-results/allure-report/* /tmp/allure-temp/
        
        # Create branch directory and copy from temp
        mkdir -p "$BRANCH_DIR"
        cp -r /tmp/allure-temp/* "$BRANCH_DIR/"
        
        # Copy videos if they exist
        if [ -d "test-results/videos" ]; then
          mkdir -p "$BRANCH_DIR/videos"
          cp -r test-results/videos/* "$BRANCH_DIR/videos/"
        fi
        
        # Debug info
        echo "Branch directory contents:"
        ls -la "$BRANCH_DIR"
        
        # Clean up
        rm -rf /tmp/allure-temp
        
    - name: 🚀 Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        force_orphan: true
        
    - name: 📝 Create Report Summary
      if: always()
      run: |
        echo "### Test Report Summary" >> $GITHUB_STEP_SUMMARY
        echo "✅ Test results have been deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
        echo "📊 [View Allure Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/branches/${GITHUB_REF#refs/heads/}/index.html)" >> $GITHUB_STEP_SUMMARY
        echo "🎥 [Download Test Recording](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/branches/${GITHUB_REF#refs/heads/}/videos/test-recording.mp4)" >> $GITHUB_STEP_SUMMARY

  pages:
    name: 🌐 GitHub Pages
    needs: report
    runs-on: ubuntu-latest
    if: always()
    # Environment protection kurallarını bypass etmek için
    permissions:
      pages: write
      id-token: write
      deployments: write
      actions: write
      security-events: write
      contents: write
      issues: write
      pull-requests: write
    
    steps:
    - name: 🔄 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 📥 Test Raporlarını İndir
      uses: actions/download-artifact@v4
      with:
        name: test-results
        path: target/site/allure-maven-plugin
    
    - name: 🔧 Configure Pages
      uses: actions/configure-pages@v4
    
    - name: 📂 Branch Klasörü Oluştur
      run: |
        # Önce geçici bir klasöre kopyala
        mkdir -p /tmp/allure-temp
        cp -r target/site/allure-maven-plugin/* /tmp/allure-temp/
        
        # Branch klasörünü oluştur
        mkdir -p target/site/allure-maven-plugin/branches/${{ env.BRANCH_NAME }}
        
        # Geçici klasörden branch klasörüne kopyala
        cp -r /tmp/allure-temp/* target/site/allure-maven-plugin/branches/${{ env.BRANCH_NAME }}/
        
        # Ana dizinde index.html oluştur
        cat > target/site/allure-maven-plugin/index.html << EOL
        <!DOCTYPE html>
        <html>
        <head>
            <title>Test Reports</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                h1 { color: #333; }
                .branch-list { list-style: none; padding: 0; }
                .branch-list li { 
                    margin: 10px 0;
                    padding: 10px;
                    background: #f5f5f5;
                    border-radius: 5px;
                }
                .branch-list a {
                    color: #0366d6;
                    text-decoration: none;
                    font-weight: bold;
                }
                .branch-list a:hover { text-decoration: underline; }
                .current { background: #e1f0ff !important; }
                .timestamp { color: #666; font-size: 0.9em; }
                .repo-link { margin-top: 20px; }
            </style>
        </head>
        <body>
            <h1>🧪 Test Reports for All Branches</h1>
            <p>Current Branch: <strong>${{ env.BRANCH_NAME }}</strong></p>
            <ul class="branch-list">
        EOL
        
        # Branch listesini oluştur
        if [ -d "target/site/allure-maven-plugin/branches" ]; then
          for branch in target/site/allure-maven-plugin/branches/*; do
            if [ -d "$branch" ]; then
              branch_name=$(basename "$branch")
              timestamp=$(date '+%Y-%m-%d %H:%M:%S')
              if [ "$branch_name" = "${{ env.BRANCH_NAME }}" ]; then
                echo "<li class='current'><a href='branches/$branch_name'>📊 $branch_name (Current)</a><br><span class='timestamp'>Updated: $timestamp</span></li>" >> target/site/allure-maven-plugin/index.html
              else
                echo "<li><a href='branches/$branch_name'>📊 $branch_name</a><br><span class='timestamp'>Updated: $timestamp</span></li>" >> target/site/allure-maven-plugin/index.html
              fi
            fi
          done
        else
          timestamp=$(date '+%Y-%m-%d %H:%M:%S')
          echo "<li class='current'><a href='branches/${{ env.BRANCH_NAME }}'>📊 ${{ env.BRANCH_NAME }} (Current)</a><br><span class='timestamp'>Updated: $timestamp</span></li>" >> target/site/allure-maven-plugin/index.html
        fi
        
        cat >> target/site/allure-maven-plugin/index.html << EOL
            </ul>
            <p class="timestamp">Last updated: $(date)</p>
            <p class="repo-link">Repository: <a href="https://github.com/${{ github.repository }}">${{ github.repository }}</a></p>
        </body>
        </html>
        EOL
        
        # Geçici klasörü temizle
        rm -rf /tmp/allure-temp
        
        # Klasör yapısını kontrol et
        echo "Klasör yapısı:"
        ls -R target/site/allure-maven-plugin/
    
    - name: 📤 Upload Pages Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: target/site/allure-maven-plugin
        retention-days: 30

  deploy:
    name: 🚀 Rapor Yayınlama
    needs: pages
    runs-on: ubuntu-latest
    if: always()
    # Environment protection kurallarını bypass etmek için
    permissions:
      pages: write
      id-token: write
      deployments: write
      actions: write
      security-events: write
      contents: write
      issues: write
      pull-requests: write
    
    steps:
    - name: 🌐 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      with:
        artifact_name: github-pages
        preview: false
        error_count: 0
        
    - name: ✅ Verify Deployment
      if: success()
      run: |
        echo "Deployment successful!"
        echo "Report URL: ${{ env.DEPLOY_URL }}/branches/${{ env.BRANCH_NAME }}"

  notify:
    name: 📢 Bildirim Gönderme
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📋 Durum Kontrolü
      run: |
        if [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "## ✅ Testler Başarıyla Tamamlandı" >> $GITHUB_STEP_SUMMARY
          echo "Branch: ${{ env.BRANCH_NAME }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Test Hatası Tespit Edildi" >> $GITHUB_STEP_SUMMARY
          echo "Branch: ${{ env.BRANCH_NAME }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "## 🌐 Rapor Başarıyla Yayınlandı" >> $GITHUB_STEP_SUMMARY
          echo "📊 [Ana Rapor](${{ env.DEPLOY_URL }})" >> $GITHUB_STEP_SUMMARY
          echo "📊 [Branch Raporu](${{ env.DEPLOY_URL }}/branches/${{ env.BRANCH_NAME }})" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ Rapor Yayınlama Hatası" >> $GITHUB_STEP_SUMMARY
        fi 